/**
 * @fileoverview Firestore Security Rules for EnrollEase Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data, such as user profiles and notes,
 * while allowing public read access to certain collections like 'announcements'. Access control is
 * primarily based on the authenticated user's ID (`request.auth.uid`).  Data validation is relaxed
 * in this prototyping phase, focusing on relational integrity and authorization.
 *
 * Data Structure:
 * - /userProfiles/{userId}: User profile information.
 * - /institutes/{instituteId}: Institute data.
 * - /institutes/{instituteId}/members/{userId}: Institute member data, mirroring user profiles.
 * - /users/{userId}/notes/{noteId}: User-specific notes.
 * - /courses/{courseId}: Course information.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Enrollment information for a course.
 * - /announcements/{announcementId}: System-wide announcements.
 * - /userProfiles/{userId}/dailyQuizAttempts/{attemptId}: Daily quiz attempts for a student.
 *
 * Key Security Decisions:
 * - User profiles are only readable and writable by the owning user.
 * - Institutes are readable by anyone, but only the owner can modify them.
 * - Announcements are publicly readable, but only admins can create them. (Not implemented here).
 * - Listing of user profiles is denied to prevent unauthorized data access.
 *
 * Denormalization for Authorization:
 * To simplify and optimize rules, the following denormalization strategies are employed:
 * - Institute documents should contain an `ownerId` field to easily determine ownership for write operations.
 * - Relationships are validated on creation to ensure data consistency (e.g., userId on notes).
 *
 * Structural Segregation:
 * Private user data (notes, quiz attempts) is stored under the /users/{userId} path,
 * while public data (announcements) is stored in a top-level collection. This segregation simplifies
 * access control and improves query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access for user profile documents.
     * @path /userProfiles/{userId}
     * @allow (create) User with UID 'userId' can create their own profile.
     * @allow (get, update, delete) User with UID 'userId' can read, update, and delete their own profile.
     * @deny (create, update, delete) User with UID other than 'userId' cannot create, update, or delete this profile.
     * @deny (list) Listing user profiles is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read institutes, but restricts creation, updates, and deletion to the owner.
     * @path /institutes/{instituteId}
     * @allow (get, list) Any user can read institute data.
     * @allow (create) User with UID matching 'ownerId' can create an institute.
     * @allow (update, delete) User with UID not matching the institute's 'ownerId' can update or delete the institute.
     * @deny (create, update, delete) User with UID not matching 'ownerId' cannot create, update, or delete this institute.
     * @principle Public read access with owner-only writes.
     */
    match /institutes/{instituteId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth.uid == resource.data.ownerId;
      allow delete: if request.auth.uid == resource.data.ownerId;
    }

    /**
     * @description Enforces owner-only access for institute member documents.
     * @path /institutes/{instituteId}/members/{userId}
     * @allow (create) User with UID 'userId' can create their own member profile under this institute.
     * @allow (get, update, delete) User with UID 'userId' can read, update, and delete their own member profile under this institute.
     * @deny (create, update, delete) User with UID other than 'userId' cannot create, update, or delete this member profile.
     * @deny (list) Listing institute members is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{instituteId}/members/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces owner-only access for user notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with UID 'userId' can create notes under their own user ID.
     * @allow (get, update, delete) User with UID 'userId' can read, update, and delete their own notes.
     * @deny (create, update, delete) User with UID other than 'userId' cannot create, update, or delete notes under this user ID.
     * @deny (list) User with UID 'userId' can list notes.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read course data, but restricts creation, updates, and deletion to institute owners (not implemented).
     * @path /courses/{courseId}
     * @allow (get, list) Any user can read course data.
     * @deny (create, update, delete) No user can create, update, or delete courses.
     * @principle Public read access with owner-only writes (TODO).
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add institute owner validation once the schema is updated with an instituteId field.
      allow update: if false; // TODO: Add institute owner validation once the schema is updated with an instituteId field.
      allow delete: if false; // TODO: Add institute owner validation once roles are implemented.
    }

    /**
     * @description Restricts access to course enrollments.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     * @allow (get, list) No user can read enrollment data.
     * @deny (create, update, delete) No user can create, update, or delete enrollments.
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
      allow get, list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read announcements, but restricts creation, updates, and deletion to admins (not implemented).
     * @path /announcements/{announcementId}
     * @allow (get, list) Any user can read announcement data.
     * @deny (create, update, delete) No user can create, update, or delete announcements.
     * @principle Public read access with admin-only writes (TODO).
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin validation once roles are implemented.
      allow update: if false; // TODO: Add admin validation once roles are implemented.
      allow delete: if false; // TODO: Add admin validation once roles are implemented.
    }

    /**
     * @description Enforces owner-only access for daily quiz attempts.
     * @path /userProfiles/{userId}/dailyQuizAttempts/{attemptId}
     * @allow (create) User with UID 'userId' can create quiz attempts under their own user ID.
     * @allow (get, update, delete) User with UID 'userId' can read, update, and delete their own quiz attempts.
     * @deny (create, update, delete) User with UID other than 'userId' cannot create, update, or delete quiz attempts under this user ID.
     * @deny (list) User with UID 'userId' can list quiz attempts.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /userProfiles/{userId}/dailyQuizAttempts/{attemptId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Addresses the error reported by NextJS. The user does not have permission to list messages under the chat session.
     * @path /userProfiles/{userId}/chatSessions/default_tutor_session/messages/{messageId}
     * @allow (list) User with UID 'userId' can list messages.
     */
    match /userProfiles/{userId}/chatSessions/default_tutor_session/messages/{messageId} {
        allow list: if isOwner(userId);
        allow get: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }
  }

  // Helper function to determine if the request is from the document owner.
  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }

    // Helper function to determine if the request is from the document owner and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource.data != null;
  }

  // Helper function to check if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}