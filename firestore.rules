/**
 * @fileoverview Firestore Security Rules for EnrollEase Platform
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for personal data and a role-based model for organizational data (institutes, courses, announcements).
 *
 * Data Structure:
 * - /userProfiles/{userId}: User profile information, accessible only to the user themselves.
 * - /institutes/{instituteId}: Institute data, with ownership managed by the institute's owner.
 * - /institutes/{instituteId}/members/{userId}: Members of the institute, mirroring user profile information.
 * - /users/{userId}/notes/{noteId}: Notes specific to a user, accessible only by that user.
 * - /courses/{courseId}: Course data, owned by an institute.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Enrollment records for courses.
 * - /announcements/{announcementId}: System-wide announcements, write-protected for admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Strict ownership is enforced for user profiles and notes.
 * - Institutes have owners, and membership is explicitly managed.
 * - Announcements can only be created and managed by admins (represented by matching `adminId`).
 * - The rules prioritize authorization and relational integrity checks. Data validation is relaxed to enable rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /userProfiles/{userId}
     * @allow (create, get, update, delete, list) if the user's UID matches the 'userId' parameter in the path.
     * @deny (create) if the user's UID does not match the 'userId' parameter.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to institutes.
     * @path /institutes/{instituteId}
     * @allow (create, get, update, delete, list) if the user is the owner of the institute.
     * @deny (create) if the user is not the owner of the institute.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{instituteId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(instituteId) {
          return isSignedIn() && request.auth.uid == resource.data.ownerId;
      }

      function canCreate() {
          return isSignedIn() && request.auth.uid == request.resource.data.ownerId;
      }

       function isExistingOwner(instituteId) {
        return isSignedIn() && isOwner(instituteId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if canCreate();
      allow update: if isExistingOwner(instituteId);
      allow delete: if isExistingOwner(instituteId);
    }

      /**
       * @description Controls access to institute members.
       * @path /institutes/{instituteId}/members/{userId}
       * @allow (create, get, update, delete, list) if the user is an owner of the parent institute.
       * @deny (create) if the user is not an owner of the parent institute.
       * @principle Enforces document ownership for writes, inheriting ownership from parent.
       */
    match /institutes/{instituteId}/members/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isInstituteOwner(instituteId) {
            return isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
        }

        function isExistingInstituteOwner(instituteId) {
            return isSignedIn() && isInstituteOwner(instituteId) && resource.data != null;
        }
        
        allow get: if isInstituteOwner(instituteId);
        allow list: if isInstituteOwner(instituteId);
        allow create: if isInstituteOwner(instituteId);
        allow update: if isExistingInstituteOwner(instituteId);
        allow delete: if isExistingInstituteOwner(instituteId);
    }

    /**
     * @description Controls access to user notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create, get, update, delete, list) if the user's UID matches the 'userId' parameter in the path.
     * @deny (create) if the user's UID does not match the 'userId' parameter.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notes/{noteId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to courses.
     * @path /courses/{courseId}
     * @allow (create, get, update, delete, list) if the user is the owner of the institute associated with the course.
     * @deny (create) if the user is not the owner of the institute associated with the course.
     * @principle Enforces document ownership for writes based on the institute's ownership.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

        function getInstituteId(courseId) {
            return get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId;
        }

      function isInstituteOwner(instituteId) {
        return isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
      }

      function canCreate(instituteId) {
          return isSignedIn() && isInstituteOwner(instituteId);
      }

      function isExistingInstituteOwner(instituteId) {
        return isSignedIn() && isInstituteOwner(instituteId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && canCreate(request.resource.data.instituteId);
      allow update: if isExistingInstituteOwner(getInstituteId(courseId));
      allow delete: if isExistingInstituteOwner(getInstituteId(courseId));
    }

    /**
     * @description Controls access to course enrollments.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function getInstituteIdFromCourse(courseId) {
            return get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId;
        }

        function isCourseOwner(courseId) {
            let instituteId = getInstituteIdFromCourse(courseId);
            return isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
        }

        function isExistingCourseOwner(courseId) {
            return isSignedIn() && isCourseOwner(courseId) && resource.data != null;
        }

        allow get: if isCourseOwner(courseId);
        allow list: if isCourseOwner(courseId);
        allow create: if isCourseOwner(courseId);
        allow update: if isExistingCourseOwner(courseId);
        allow delete: if isExistingCourseOwner(courseId);
    }

    /**
     * @description Controls access to system-wide announcements.
     * @path /announcements/{announcementId}
     */
    match /announcements/{announcementId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          // TODO: Replace with a proper admin check (e.g., a global role)
          return true;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource.data != null;
      allow delete: if isSignedIn() && isAdmin() && resource.data != null;
    }
  }
}