/**
 * @file EnrollEase Firestore Security Rules
 * @version Prototyping
 * @corePhilosophy This ruleset enforces a strict user-ownership model where users can only access their own data,
 *   with the exception of public announcements and institutes. Institutes can manage their own data.
 * @dataStructure Data is organized into top-level collections (userProfiles, institutes, courses, announcements)
 *   and user-scoped subcollections (/users/{userId}/notes, /userProfiles/{userId}/dailyQuizAttempts).
 * @keySecurityDecisions User listing is disallowed. The rules explicitly deny any unauthorized access.
 *   All write operations are protected by authorization checks to prevent unauthorized data modification.
 * @denormalizationForAuthorization User IDs are used in path segments and document fields to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /userProfiles/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) User with matching ID can access and modify their profile.
     * @deny (create) User cannot create a profile with an ID that does not match their auth UID.
     * @deny (get, update, delete) User cannot access or modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to institutes.
     * @path /institutes/{instituteId}
     * @allow (get, list) Anyone can read institute information.
     * @allow (create) User can create an institute if the ownerId matches their auth UID.
     * @allow (update, delete) Only the institute owner can update or delete the institute.
     * @deny (create) User cannot create an institute with an ownerId that does not match their auth UID.
     * @deny (update, delete) User cannot update or delete an institute they do not own.
     * @principle Public read access with owner-only writes.
     */
    match /institutes/{instituteId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
       function isExistingOwner() {
        return isSignedIn() && resource.data.ownerId == request.auth.uid;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == resource.data.ownerId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.ownerId;
    }

      /**
       * @description Controls access to institute members.
       * @path /institutes/{instituteId}/members/{userId}
       * @allow (get) Anyone can read institute member information.
       * @allow (create) User can create an institute member if the institute owner id matches their auth UID.
       * @allow (update, delete) Only the institute owner can update or delete the institute member.
       * @deny (create) User cannot create an institute member with an ownerId that does not match their auth UID.
       * @deny (update, delete) User cannot update or delete an institute member they do not own.
       * @principle Public read access with owner-only writes.
       */
    match /institutes/{instituteId}/members/{userId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isInstituteOwner(instituteId) {
          return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
        }
        function isExistingInstituteOwner(instituteId) {
          return isSignedIn() && isInstituteOwner(instituteId);
        }

        allow get: if true;
        allow list: if false; // Listing members is not allowed

        allow create: if isSignedIn() && isInstituteOwner(instituteId);
        allow update: if isSignedIn() && isInstituteOwner(instituteId);
        allow delete: if isSignedIn() && isInstituteOwner(instituteId);
    }


    /**
     * @description Controls access to user notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with matching ID can create notes.
     * @allow (get, list, update, delete) User with matching ID can access and modify their own notes.
     * @deny (create) User cannot create a note for another user.
     * @deny (get, list, update, delete) User cannot access or modify another user's notes.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notes/{noteId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to courses.
     * @path /courses/{courseId}
     * @allow (get, list) Anyone can read course information.
     * @allow (create) User can create a course if the instituteId matches an institute they own.
     * @allow (update, delete) Only the institute owner can update or delete the course.
     * @deny (create) User cannot create a course for an institute they do not own.
     * @deny (update, delete) User cannot update or delete a course they do not own.
     * @principle Public read access with owner-only writes.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isInstituteOwner(instituteId) {
        return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
      }
        function isExistingInstituteOwner(instituteId) {
          return isSignedIn() && isInstituteOwner(instituteId);
        }

      allow get, list: if true;
      allow create: if isSignedIn() && isInstituteOwner(request.resource.data.instituteId);
      allow update: if isSignedIn() && isInstituteOwner(resource.data.instituteId);
      allow delete: if isSignedIn() && isInstituteOwner(resource.data.instituteId);
    }

    /**
     * @description Controls access to course enrollments.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isInstituteOwner(instituteId) {
          return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
        }
       function isExistingInstituteOwner(instituteId) {
        return isSignedIn() && isInstituteOwner(instituteId);
      }

        allow get: if true; // Open access for prototyping.  Consider restricting to enrolled students and course owners in production.
        allow list: if false;

        allow create: if isSignedIn(); // Restrict in production (e.g., to students enrolling themselves or course owners).
        allow update: if isSignedIn() ; // Restrict in production to course owners.
        allow delete: if isSignedIn() ; // Restrict in production to course owners.
    }


    /**
     * @description Controls access to system-wide announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) Anyone can read announcements.
     * @allow (create) Only admins can create announcements.
     * @allow (update, delete) Only the admin who created the announcement can update or delete it.
     * @deny (create) Non-admins cannot create announcements.
     * @deny (update, delete) Users cannot update or delete announcements they did not create.
     * @principle Public read access with admin-only writes.
     */
    match /announcements/{announcementId} {
      function isSignedIn() {
        return request.auth != null;
      }
      // TODO: Implement admin role check (e.g., from custom claims).  For now, only signed-in users can create.
      function isAdmin() {
        return isSignedIn();
      }

      function isOwner(adminId) {
        return request.auth.uid == adminId;
      }

        function isExistingOwner() {
           return isSignedIn() && resource.data.adminId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isSignedIn() && request.auth.uid == resource.data.adminId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.adminId;
    }

     /**
      * @description Controls access to daily quiz attempts for each user.
      * @path /userProfiles/{userId}/dailyQuizAttempts/{attemptId}
      * @allow (create) User with matching ID can create daily quiz attempts.
      * @allow (get, list, update, delete) User with matching ID can access and modify their own daily quiz attempts.
      * @deny (create) User cannot create a daily quiz attempt for another user.
      * @deny (get, list, update, delete) User cannot access or modify another user's daily quiz attempts.
      * @principle Enforces document ownership for writes.
      */
    match /userProfiles/{userId}/dailyQuizAttempts/{attemptId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
       function isExistingOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if request.auth.uid == userId;
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }
  }
}