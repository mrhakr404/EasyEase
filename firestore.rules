/**
 * @fileoverview Firestore Security Rules for EnrollEase platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and notes,
 * and an institute-ownership model for courses. Announcements are restricted to admins.
 * Data validation is relaxed to allow for rapid prototyping but authorization is strictly enforced.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /users/{userId}/notes/{noteId}: Stores notes for each user, accessible only to the user themselves.
 * - /courses/{courseId}: Stores course information, accessible to anyone, but writable only by the owning institute.
 * - /announcements/{announcementId}: Stores announcements, accessible to anyone, but writable only by admins.
 *
 * Key Security Decisions:
 * - User profiles and notes are strictly private to the owning user.
 * - Courses are readable by anyone but creatable/updatable/deletable only by the owning institute.
 * - Announcements are readable by anyone but creatable/updatable/deletable only by admins (represented by adminId on the document).
 * - Listing of user profiles is disallowed.
 *
 * Denormalization for Authorization:
 * - Courses store instituteId to determine ownership.
 * - Announcements store adminId to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete, list) if the request is made by the user with matching userId.
     * @deny (get, create, update, delete, list) if the request is made by a different user or an unauthenticated user.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces owner-only access to note documents within a user's collection.
     * @path /users/{userId}/notes/{noteId}
     * @allow (get, create, update, delete, list) if the request is made by the user with matching userId.
     * @deny (get, create, update, delete, list) if the request is made by a different user or an unauthenticated user.
     * @principle Restricts access to a user's own data tree, ensuring privacy.
     */
    match /users/{userId}/notes/{noteId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) ;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to courses, but restricts write access to the owning institute.
     * @path /courses/{courseId}
     * @allow (get, list) to anyone.
     * @allow (create) only if the request includes the instituteId matching the user's id.
     * @allow (update, delete) only if the request is made by the institute that owns the course.
     * @deny (create, update, delete) if the request is made by a user other than the owning institute.
     * @principle Implements public read with owner-only writes, leveraging denormalization for authorization.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.instituteId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.instituteId == resource.data.instituteId && request.auth.uid == resource.data.instituteId;
      allow delete: if isSignedIn() && request.resource.data.instituteId == resource.data.instituteId && request.auth.uid == resource.data.instituteId;
    }

    /**
     * @description Allows public read access to announcements, but restricts write access to admins.
     * @path /announcements/{announcementId}
     * @allow (get, list) to anyone.
     * @allow (create) only if the request includes the adminId matching the user's id.
     * @allow (update, delete) only if the request is made by the admin that created the announcement.
     * @deny (create, update, delete) if the request is made by a user other than the creator.
     * @principle Implements public read with owner-only writes, leveraging denormalization for authorization.
     */
    match /announcements/{announcementId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.adminId == resource.data.adminId && request.auth.uid == resource.data.adminId;
      allow delete: if isSignedIn() && request.resource.data.adminId == resource.data.adminId && request.auth.uid == resource.data.adminId;
    }
  }
}