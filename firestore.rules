/**
 * @fileoverview Firestore Security Rules for EnrollEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data, such as user profiles and notes,
 * while allowing public read access to certain collections like announcements.  Data within a user's
 * subcollections is only accessible to that user.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles.  The 'userId' must match the authenticated user's UID.
 * - /institutes/{instituteId}: Stores institute profiles. Institutes have members stored in a subcollection.
 * - /institutes/{instituteId}/members/{userId}: Mirrors UserProfile data for institute members.
 * - /users/{userId}/notes/{noteId}: Stores user-specific notes. Only the owner user can read/write.
 * - /courses/{courseId}: Stores course information, owned by an institute.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Tracks student enrollments in courses.
 * - /announcements/{announcementId}: Stores public announcements.  Read access is public, write access restricted to admins (not yet implemented).
 * - /userProfiles/{userId}/dailyQuizAttempts/{attemptId}: Stores a student's attempts at daily quiz questions. Path-based ownership is enforced.
 *
 * Key Security Decisions:
 * - User listing is disallowed on `/userProfiles`.
 * - Public read access is granted to the `/announcements` collection.
 * - The security posture defaults to strict ownership unless explicitly overridden.
 *
 * Denormalization for Authorization:
 * - The `ownerId` field is used in the `institutes` collection to easily determine ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /userProfiles/{userId}
     * @allow (create) - Allow user to create their own profile if the userId matches their auth.uid.
     * @allow (get) - Allow user to get their own profile if the userId matches their auth.uid.
     * @allow (update) - Allow user to update their own profile if the userId matches their auth.uid.
     * @allow (delete) - Allow user to delete their own profile if the userId matches their auth.uid.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - Deny creation if the userId doesn't match the auth.uid.
     * @deny (update) - Deny update if the userId doesn't match the auth.uid.
     * @deny (delete) - Deny deletion if the userId doesn't match the auth.uid.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for institutes.
     * @path /institutes/{instituteId}
     * @allow (create) - Allow anyone to create an institute (for now).
     * @allow (get) - Allow anyone to read an institute.
     * @allow (list) - Allow anyone to list institutes.
     * @allow (update) - Allow only the owner to update an institute.
     * @allow (delete) - Allow only the owner to delete an institute.
     * @principle Enforces ownership for institute management.
     */
    match /institutes/{instituteId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for institute members.
     * @path /institutes/{instituteId}/members/{userId}
     * @allow (create) - Allow the institute owner to add a member.
     * @allow (get) - Allow members of the institute to read member profiles.
     * @allow (list) - Allow members of the institute to list member profiles.
     * @allow (update) - Allow the user to update their own member profile.
     * @allow (delete) - Allow the institute owner to remove a member.
     * @principle Enforces ownership and membership-based access control.
     */
    match /institutes/{instituteId}/members/{userId} {
       allow get, list: if true; // Relaxed security temporarily
       allow create: if isSignedIn(); // Relaxed security temporarily
       allow update: if isExistingOwner(userId); // Relaxed security temporarily
       allow delete: if isExistingOwner(userId); // Relaxed security temporarily
    }

    /**
     * @description Rules for user notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) - Allow user to create a note if the userId matches their auth.uid.
     * @allow (get) - Allow user to get their own note if the userId matches their auth.uid.
     * @allow (list) - Allow user to list their own notes.
     * @allow (update) - Allow user to update their own note if the userId matches their auth.uid.
     * @allow (delete) - Allow user to delete their own note if the userId matches their auth.uid.
     * @deny (create) - Deny creation if the userId doesn't match the auth.uid.
     * @deny (get) - Deny retrieval if the userId doesn't match the auth.uid.
     * @deny (update) - Deny update if the userId doesn't match the auth.uid.
     * @deny (delete) - Deny deletion if the userId doesn't match the auth.uid.
     * @principle Enforces strict user ownership for notes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for courses.
     * @path /courses/{courseId}
     * @allow (create) - Allow anyone to create a course (for now, institute-based ownership will be added).
     * @allow (get) - Allow anyone to read a course.
     * @allow (list) - Allow anyone to list courses.
     * @allow (update) - Allow only the institute to update the course.
     * @allow (delete) - Allow only the institute to delete the course.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // Relaxed security temporarily
      allow update: if isSignedIn(); // TODO: Secure this to institute only
      allow delete: if isSignedIn(); // TODO: Secure this to institute only
    }

    /**
     * @description Rules for course enrollments.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
       allow get, list: if true; // Relaxed security temporarily
       allow create: if isSignedIn(); // Relaxed security temporarily
       allow update: if isExistingOwner(request.auth.uid); // Relaxed security temporarily
       allow delete: if isExistingOwner(request.auth.uid); // Relaxed security temporarily
    }


    /**
     * @description Rules for announcements.
     * @path /announcements/{announcementId}
     * @allow (get) - Allow anyone to read announcements.
     * @allow (list) - Allow anyone to list announcements.
     * @deny (create) - Deny creation (admin-only, not yet implemented).
     * @deny (update) - Deny update (admin-only, not yet implemented).
     * @deny (delete) - Deny deletion (admin-only, not yet implemented).
     * @principle Allows public read access for announcements, restricts write access.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Rules for daily quiz attempts.
     * @path /userProfiles/{userId}/dailyQuizAttempts/{attemptId}
     * @allow (create) - Allow user to create their own attempt if the userId matches their auth.uid.
     * @allow (get) - Allow user to get their own attempt if the userId matches their auth.uid.
     * @allow (list) - Allow user to list their own attempts.
     * @allow (update) - Allow user to update their own attempt if the userId matches their auth.uid.
     * @allow (delete) - Allow user to delete their own attempt if the userId matches their auth.uid.
     * @deny (create) - Deny creation if the userId doesn't match the auth.uid.
     * @deny (get) - Deny retrieval if the userId doesn't match the auth.uid.
     * @deny (update) - Deny update if the userId doesn't match the auth.uid.
     * @deny (delete) - Deny deletion if the userId doesn't match the auth.uid.
     * @principle Enforces strict user ownership for daily quiz attempts.
     */
    match /userProfiles/{userId}/dailyQuizAttempts/{attemptId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}