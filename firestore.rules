/**
 * @fileoverview Firestore Security Rules for EnrollEase platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data,
 * combined with role-based access for administrative functions and shared access
 * for collaborative entities like courses and institutes. Data validation is
 * minimized in this prototyping phase to allow for rapid schema iteration.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores personal user data, accessible only by the user.
 * - /institutes/{instituteId}: Stores institute data, with owner-based control.
 * - /institutes/{instituteId}/members/{userId}: Manages institute members.
 * - /users/{userId}/notes/{noteId}: Stores user-specific notes.
 * - /courses/{courseId}: Stores course information, owned by an institute.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Tracks course enrollments.
 * - /announcements/{announcementId}: Stores global announcements, managed by admins.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect privacy.
 * - Public read access is granted for announcements.
 * - Data type validation is skipped for all non-authorization fields in this prototype.
 * - Always explicitly deny any permission that is not explicitly granted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for user profiles. Only the user can read and write their own profile.
     * @path /userProfiles/{userId}
     * @allow (read, create, update) if the user is signed in and their UID matches the userId.
     * @deny (delete) User profiles cannot be deleted through the client.
     * @deny (read, create, update) if the user is not signed in or their UID does not match the userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /userProfiles/{userId} {
      allow read, create, update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if false;
      allow list: if false;
    }

    /**
     * @description Rules for nested chatSessions collection under userProfiles.
     * @path /userProfiles/{userId}/chatSessions/{sessionId}
     * @allow (read, write) if the authenticated user ID matches the parent user ID in the path.
     * @deny (read, write) if the authenticated user ID does not match the parent user ID in the path or user is not authenticated.
     * @principle Enforces user-specific access to chat sessions.
     */
    match /userProfiles/{userId}/chatSessions/{sessionId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Rules for institutes.
     * @path /institutes/{instituteId}
     * @allow (read) Allow anyone to read institute information.
     * @allow (create) An institute can be created if the ownerId matches the authenticated user.
     * @allow (update, delete) Only the owner can update or delete an institute.
     * @deny (create, update, delete) if the user is not the owner of the institute.
     * @principle Enforces owner-based access control for institutes.
     */
    match /institutes/{instituteId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow list: if true;
    }

    /**
     * @description Rules for institute members.
     * @path /institutes/{instituteId}/members/{userId}
     * @allow (read, create, update) Allow only if the request is made by the institute's owner.
     * @deny (delete) Deletion is not allowed directly through the client.
     * @principle Enforces owner-based access control for institute members.
     */
    match /institutes/{instituteId}/members/{userId} {
      allow read, create, update: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
      allow delete: if false;
      allow list: if false;
    }

    /**
     * @description Rules for user notes. Only the user can read and write their own notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (read, create, update) if the user is signed in and their UID matches the userId.
     * @deny (delete) if the user is not signed in or their UID does not match the userId.
     * @principle Enforces document ownership for user notes.
     */
    match /users/{userId}/notes/{noteId} {
      allow read, create, update, delete: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Rules for courses.
     * @path /courses/{courseId}
     * @allow (read) Allow anyone to read course information.
     * @allow (create) Allow institutes to create courses.  The instituteId must match the creating user's ID.
     * @allow (update, delete) Only the institute that owns the course can update or delete it.
     * @deny (create, update, delete) if the user is not the owner of the course.
     * @principle Enforces owner-based access control for courses.
     */
    match /courses/{courseId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.instituteId != null && get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(resource.data.instituteId)).data.ownerId == request.auth.uid;
      allow list: if true;
    }

    /**
     * @description Rules for course enrollments.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     *  @allow (read, create) if the user is enrolled in the course.
     *  @deny (update, delete) Enrollments cannot be updated or deleted directly.
     * @principle Enforces enrollment-based access control for course enrollments.
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
        // TODO: Add owner validation once the schema is updated with an ownership field.
      allow read, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for announcements.
     * @path /announcements/{announcementId}
     * @allow (read, list) Allow anyone to read announcements.
     * @allow (create) Allow admins to create announcements.
     * @allow (update, delete) Only the admin who created the announcement can update or delete it.
     * @principle Enforces public read access with admin-only write access for announcements.
     */
    match /announcements/{announcementId} {
      allow read, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.adminId == request.auth.uid;
    }
  }

  // --- Helper functions ---

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user is the owner of the resource.
   * @param {string} userId The user ID to check.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of existing resource.
   * @param {string} userId The user ID to check.
   * @return {boolean} True if the user is the owner and the resource exist, false otherwise.
   */
  function isExistingOwner(userId, ownerId) {
      return isSignedIn() && userId == ownerId;
  }

  /**
   * @description Checks if the user is the owner of existing institute.
   * @param {string} instituteId The institute ID to check.
   * @return {boolean} True if the user is the owner of the institute, false otherwise.
   */
  function isExistingInstituteOwner(instituteId) {
    return isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
  }
}