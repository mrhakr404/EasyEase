/**
 * @fileoverview Firestore Security Rules for EnrollEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to certain collections. All write
 * operations require authentication and authorization checks.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles, accessible only by the user themselves.
 * - /institutes/{instituteId}: Stores institute profiles.
 * - /institutes/{instituteId}/members/{userId}: Stores members of an institute.
 * - /users/{userId}/notes/{noteId}: Stores notes private to the user.
 * - /courses/{courseId}: Stores course information.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Tracks student enrollments for a specific course.
 * - /announcements/{announcementId}: Stores global announcements, writeable only by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Data validation is relaxed during the prototyping phase.
 * - Strict ownership is enforced on user-specific subcollections.
 *
 * Denormalization for Authorization:
 * - The rules leverage path-based authorization (e.g., /users/{userId})
 *   and denormalization of owner IDs on documents (e.g., institute.ownerId)
 *   to avoid costly `get()` calls within the rules.
 *
 * Structural Segregation:
 * - Public vs. private data is managed using separate collections and
 *   subcollections with different security profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /userProfiles/{userId}
     * @allow (create) User 'A' with ID 'A' can create their own profile.
     * @allow (get) User 'A' with ID 'A' can read their own profile.
     * @deny (create) User 'A' cannot create a profile with ID 'B'.
     * @deny (update) User 'A' cannot update someone else's profile.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for institutes.
     * @path /institutes/{instituteId}
     * @allow (create) User 'A' with the necessary role can create a new institute.
     * @allow (get) Any user can read institute information.
     * @deny (update) User 'A' cannot update an institute they don't own.
     * @principle Enforces document ownership for writes, public read.
     */
    match /institutes/{instituteId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
    }

     /**
      * @description Security rules for institute members.
      * @path /institutes/{instituteId}/members/{userId}
      * @allow (create) User 'A' with the necessary role can add a member to an institute.
      * @allow (get) Any user can read member information of an institute.
      * @deny (update) User 'A' cannot update a member if they're not an owner of the institute.
      */
    match /institutes/{instituteId}/members/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for user notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User 'A' can create a note under their own user ID.
     * @allow (get) User 'A' can read their own note.
     * @deny (update) User 'A' cannot update a note under another user's ID.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/notes/{noteId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for courses.
     * @path /courses/{courseId}
     * @allow (create) User 'A' with the necessary role can create a new course.
     * @allow (get) Any user can read course information.
     * @deny (update) User 'A' cannot update a course if they're not the owner.
     * @principle Public read, owner-only writes.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.instituteId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.instituteId == request.auth.uid && resource != null;
    }

    /**
     * @description Security rules for course enrollments.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     * @allow (create) User 'A' with the necessary role can create an enrollment.
     * @allow (get) Any user can read enrollment information for a course.
     * @deny (update) Enrollment updates are not allowed.
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Security rules for announcements.
     * @path /announcements/{announcementId}
     * @allow (create) Only admins can create announcements.
     * @allow (get) Any user can read announcements.
     * @deny (update) Non-admins cannot update announcements.
     * @principle Public read, admin-only writes.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add admin check
      allow update: if false; // TODO: Add admin check
      allow delete: if false; // TODO: Add admin check
    }

      /**
       * @description Security rules for daily quiz attempts.
       * @path /userProfiles/{userId}/dailyQuizAttempts/{attemptId}
       * @allow (create) User 'A' can create a quiz attempt under their own user ID.
       * @allow (get) User 'A' can read their own quiz attempts.
       * @deny (list) Listing all quiz attempts is not allowed.
       * @deny (update) User 'A' cannot update a quiz attempt under another user's ID.
       * @principle Restricts access to a user's own data tree; prevents listing.
       */
    match /userProfiles/{userId}/dailyQuizAttempts/{attemptId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}