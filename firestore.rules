/**
 * @fileoverview Firestore Security Rules for EnrollEase Platform
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for personal data and a role-based model for shared resources, such as courses and institutes.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores personal user data, accessible only to the user.
 * - /institutes/{instituteId}: Stores institute data, with ownership defined by the institute's `ownerId` field.
 * - /institutes/{instituteId}/members/{userId}: Stores institute member profiles, mirroring the UserProfile collection, accessible only to institute members.
 * - /users/{userId}/notes/{noteId}: Stores personal notes, accessible only to the user.
 * - /courses/{courseId}: Stores course information, with ownership defined by the course's `instituteId` field.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Tracks student enrollments for a course.
 * - /announcements/{announcementId}: Stores system-wide announcements, accessible to all users (read-only).
 *
 * Key Security Decisions:
 * - User profiles are strictly private; listing all user profiles is disallowed.
 * - Announcements are publicly readable but only writable by admins (simulated via `adminId` check).
 * - The rules explicitly prevent unauthorized modification or deletion of data.
 *
 * Denormalization for Authorization:
 * - The `ownerId` field on the `institutes` collection is used to authorize institute management operations.
 * - The `instituteId` field on the `courses` collection is used to authorize course creation and modification by the owning institute.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete): If the authenticated user's ID matches the 'userId' path.
     * @deny (get, create, update, delete): If the authenticated user's ID does not match the 'userId' path.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing user profiles is not permitted

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to institutes.
     * @path /institutes/{instituteId}
     * @allow (get, list): All users can read institute information.
     * @allow (create): Only institute owners can create new institutes.
     * @allow (update, delete): Only the institute owner can modify or delete institute data.
     * @deny (create, update, delete): If the user is not the institute owner.
     * @principle Enforces institute ownership for writes.
     */
    match /institutes/{instituteId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingInstituteOwner(instituteId);
      allow delete: if isSignedIn() && isExistingInstituteOwner(instituteId);
    }

    /**
     * @description Controls access to institute members.
     * @path /institutes/{instituteId}/members/{userId}
     * @allow (get, create, update, delete, list): Only members of the institute can access this data.
     * @deny (get, create, update, delete, list): If the user is not a member of the institute.
     * @principle Enforces membership access for institute subcollections.
     */
    match /institutes/{instituteId}/members/{userId} {
      allow get, list: if isSignedIn() && isInstituteMember(instituteId);
      allow create: if isSignedIn() && isInstituteMember(instituteId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isInstituteMember(instituteId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isInstituteMember(instituteId);
    }

    /**
     * @description Controls access to user notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (get, create, update, delete, list): Only the owner of the user profile can access their notes.
     * @deny (get, create, update, delete, list): If the user is not the owner of the notes.
     * @principle Enforces path-based ownership for user-specific subcollections.
     */
    match /users/{userId}/notes/{noteId} {
      allow get, list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingNoteOwner(userId, resource.data.userId);
      allow delete: if isSignedIn() && isExistingNoteOwner(userId, resource.data.userId);
    }

    /**
     * @description Controls access to courses.
     * @path /courses/{courseId}
     * @allow (get, list): All users can read course information.
     * @allow (create): Only institutes can create courses.
     * @allow (update, delete): Only the institute that owns the course can modify or delete it.
     * @deny (create, update, delete): If the user is not the institute owner.
     * @principle Enforces institute ownership for courses.
     */
    match /courses/{courseId} {
      allow get, list: if true;

      allow create: if isSignedIn() && isInstituteOwnerOfCourse(request.resource.data.instituteId);
      allow update: if isSignedIn() && isExistingInstituteOwnerOfCourse(resource.data.instituteId);
      allow delete: if isSignedIn() && isExistingInstituteOwnerOfCourse(resource.data.instituteId);
    }

        /**
         * @description Controls access to course enrollments.
         * @path /courses/{courseId}/enrollments/{enrollmentId}
         * @allow (get, list): Authenticated users can view enrollments.
         * @allow (create): Authenticated users can create enrollments.
         * @allow (update, delete): Only the owner of the course can modify enrollments.
         * @deny (get, create, update, delete, list): If the user is not authenticated or does not own the course.
         * @principle Enforces ownership for course enrollments.
         */
        match /courses/{courseId}/enrollments/{enrollmentId} {
            allow get, list: if isSignedIn();
            allow create: if isSignedIn();
            allow update: if isSignedIn() && isExistingInstituteOwnerOfCourse(getInstituteIdFromCourse(courseId));
            allow delete: if isSignedIn() && isExistingInstituteOwnerOfCourse(getInstituteIdFromCourse(courseId));
        }


    /**
     * @description Controls access to system-wide announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list): All users can read announcements.
     * @allow (create, update, delete): Only admins can create, update, or delete announcements.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Enforces admin-only access for announcement creation and modification.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;

      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isExistingNoteOwner(userId, noteUserId) {
        return isOwner(userId) && resource != null && userId == noteUserId;
    }

    function isInstituteOwner(instituteId) {
      return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
    }

    function isExistingInstituteOwner(instituteId) {
        return isInstituteOwner(instituteId) && resource != null;
    }

    function isInstituteMember(instituteId) {
        return exists(/databases/$(database)/documents/institutes/$(instituteId)/members/$(request.auth.uid));
    }

    function isInstituteOwnerOfCourse(instituteId) {
      return isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
    }

    function isExistingInstituteOwnerOfCourse(instituteId) {
        return isInstituteOwnerOfCourse(instituteId) && resource != null;
    }

    function isAdmin() {
      // In a real application, admin status would likely be stored in a user document.
      // For this prototype, we'll simulate an admin check.
      return request.auth.token.email == 'admin@example.com';
    }

    function getInstituteIdFromCourse(courseId) {
        return get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId;
    }
  }
}