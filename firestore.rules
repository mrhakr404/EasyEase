/**
 * @file Firestore Security Rules for EnrollEase Platform
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data,
 *                  institute-ownership for courses and related data, and admin-only access for
 *                  system-wide announcements. Data validation is relaxed in prototyping mode
 *                  to allow for rapid schema iteration, focusing instead on secure authorization.
 *
 * @data_structure
 *  - /userProfiles/{userId}: Stores individual user profiles, accessible only by the user.
 *  - /institutes/{instituteId}: Stores institute profiles, accessible only by the institute owner.
 *  - /institutes/{instituteId}/members/{userId}: Stores members of an institute, mirroring user profiles. Accessible only by institute members.
 *  - /users/{userId}/notes/{noteId}: Stores personal notes for each user, accessible only by the user.
 *  - /courses/{courseId}: Stores course information, owned by an institute.
 *  - /courses/{courseId}/enrollments/{enrollmentId}: Stores enrollment data, managed by the institute.
 *  - /announcements/{announcementId}: Stores system-wide announcements, accessible only by admins.
 *
 * @key_security_decisions
 *  - User listing is disabled to protect user privacy.
 *  - Data validation is minimal, focusing on authorization and relational integrity.
 *  - Strict ownership is enforced for user profiles, notes, institutes, and courses.
 *  - Announcements are restricted to admin users.
 *
 * @denormalization_for_authorization
 *  - The `instituteId` field in the `Course` document is used for institute-based authorization,
 *    avoiding the need for complex queries to determine course ownership.
 *
 * @structural_segregation Private user data (notes) is stored in a user-specific subcollection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile information.
     * @path /userProfiles/{userId}
     * @allow (read) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (update, delete) Authenticated user can update or delete their own profile if the userId matches their auth.uid and the document exists.
     * @deny (read) Authenticated user cannot read other user's profiles.
     * @deny (create, update, delete) Unauthenticated user cannot perform any operations.
     * @principle Enforces document ownership for writes; read access limited to the owner.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && existsAfter(/databases/$(database)/documents/userProfiles/$(userId));
      allow delete: if isSignedIn() && isOwner(userId) && existsAfter(/databases/$(database)/documents/userProfiles/$(userId));
    }

    /**
     * @description Manages institutes.
     * @path /institutes/{instituteId}
     * @allow (read) Any user can read institute profiles.
     * @allow (create) Authenticated user can create an institute if they are the owner.
     * @allow (update, delete) Authenticated user who is the owner of the institute can update or delete it.
     * @deny (create, update, delete) Unauthenticated user cannot perform any operations.
     * @principle Enforces institute ownership for writes; read access is public.
     */
    match /institutes/{instituteId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner() {
            return request.auth.uid == resource.data.ownerId;
        }

        function isCreatingOwner() {
            return request.auth.uid == request.resource.data.ownerId;
        }


        allow get: if true;
        allow list: if true;

        allow create: if isSignedIn() && isCreatingOwner();
        allow update: if isSignedIn() && isOwner() && existsAfter(/databases/$(database)/documents/institutes/$(instituteId));
        allow delete: if isSignedIn() && isOwner() && existsAfter(/databases/$(database)/documents/institutes/$(instituteId));
    }

     /**
      * @description Manages members of an institute.
      * @path /institutes/{instituteId}/members/{userId}
      * @allow (read) Only members of the institute can read the member list.
      * @allow (create) Only members of the institute can create new members.
      * @allow (update, delete) Only members of the institute can update/delete members.
      * @deny (read) Non-members cannot read the member list.
      * @deny (create, update, delete) Non-members cannot create, update, or delete members.
      * @principle Enforces institute membership for read/write access.
      */
    match /institutes/{instituteId}/members/{userId} {
          function isSignedIn() {
            return request.auth != null;
          }

           function isInstituteOwner(instituteId) {
             return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
           }

          allow get: if isSignedIn() && isInstituteOwner(instituteId);
          allow list: if isSignedIn() && isInstituteOwner(instituteId);
          allow create: if isSignedIn() && isInstituteOwner(instituteId);
          allow update: if isSignedIn() && isInstituteOwner(instituteId) && existsAfter(/databases/$(database)/documents/institutes/$(instituteId)/members/$(userId));
          allow delete: if isSignedIn() && isInstituteOwner(instituteId) && existsAfter(/databases/$(database)/documents/institutes/$(instituteId)/members/$(userId));
    }

    /**
     * @description Manages notes for a user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (read) Authenticated user can read their own notes.
     * @allow (create) Authenticated user can create a note in their own user path.
     * @allow (update, delete) Authenticated user can update or delete their own notes if the userId matches their auth.uid and the document exists.
     * @deny (read) Authenticated user cannot read other user's notes.
     * @deny (create, update, delete) Unauthenticated user cannot perform any operations.
     * @principle Enforces document ownership for writes; read access limited to the owner.
     */
    match /users/{userId}/notes/{noteId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }


      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/notes/$(noteId));
      allow delete: if isSignedIn() && isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/notes/$(noteId));
    }

    /**
     * @description Manages courses.
     * @path /courses/{courseId}
     * @allow (read) Any user can read course information.
     * @allow (create) Only the institute that owns the course can create it.
     * @allow (update, delete) Only the institute that owns the course can update or delete it.
     * @deny (create, update, delete) Unauthenticated user cannot perform any operations.
     * @principle Enforces institute ownership for writes; read access is public.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isInstituteOwner() {
        return get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId == request.auth.uid;
      }

       function existingIsInstituteOwner() {
        return get(/databases/$(database)/documents/institutes/$(resource.data.instituteId)).data.ownerId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && isInstituteOwner();
      allow update: if isSignedIn() && existingIsInstituteOwner() && existsAfter(/databases/$(database)/documents/courses/$(courseId));
      allow delete: if isSignedIn() && existingIsInstituteOwner() && existsAfter(/databases/$(database)/documents/courses/$(courseId));
    }

    /**
     * @description Manages enrollments for a course.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     * @allow (read) Only the institute that owns the course can read enrollments.
     * @allow (create) Only the institute that owns the course can create enrollments.
     * @allow (update, delete) Only the institute that owns the course can update or delete enrollments.
     * @deny (read) Non-owners cannot read enrollments.
     * @deny (create, update, delete) Non-owners cannot create, update, or delete enrollments.
     * @principle Enforces institute ownership for read/write access.
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCourseOwnedByInstitute(courseId) {
            return get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId == get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.instituteId;
        }

        allow get: if isSignedIn() && isCourseOwnedByInstitute(courseId);
        allow list: if isSignedIn() && isCourseOwnedByInstitute(courseId);
        allow create: if isSignedIn() && isCourseOwnedByInstitute(courseId);
        allow update: if isSignedIn() && isCourseOwnedByInstitute(courseId) && existsAfter(/databases/$(database)/documents/courses/$(courseId)/enrollments/$(enrollmentId));
        allow delete: if isSignedIn() && isCourseOwnedByInstitute(courseId) && existsAfter(/databases/$(database)/documents/courses/$(courseId)/enrollments/$(enrollmentId));
    }

    /**
     * @description Manages system-wide announcements.
     * @path /announcements/{announcementId}
     * @allow (read) Any user can read announcements.
     * @allow (create, update, delete) Only admins can create, update, or delete announcements.
     * @deny (create, update, delete) Non-admins cannot perform any operations.
     * @principle Restricts write access to admins; read access is public.
     */
    match /announcements/{announcementId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && existsAfter(/databases/$(database)/documents/announcements/$(announcementId));
      allow delete: if isSignedIn() && isAdmin() && existsAfter(/databases/$(database)/documents/announcements/$(announcementId));
    }
  }
}