/**
 * @fileoverview Firestore Security Rules for EnrollEase.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for private data and allows public read access for shared content like announcements.
 *
 * Data Structure:
 * - User profiles are stored under `/userProfiles/{userId}`, ensuring only the user can manage their profile.
 * - Institutes are stored under `/institutes/{instituteId}` and manage memberships via the `/institutes/{instituteId}/members/{userId}` subcollection.
 * - Courses are stored under `/courses/{courseId}` and track enrollments in the `/courses/{courseId}/enrollments/{enrollmentId}` subcollection.
 * - Notes are stored under `/users/{userId}/notes/{noteId}`, providing a user-specific data tree.
 * - Announcements are stored under `/announcements/{announcementId}` and are publicly readable but admin-owned for writes.
 *
 * Key Security Decisions:
 * - Listing user profiles is disallowed to protect user privacy.
 * - Public read access is granted for announcements.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * To simplify rules and improve performance, the following authorization data should be denormalized:
 * - Institute documents should contain an `ownerId` field indicating the user who owns the institute.
 *
 * Structural Segregation:
 * The application uses separate collections for public (announcements) and private (user notes) data to optimize read access and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile access.
     * @path /userProfiles/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @allow (update) Authenticated user can update their own profile.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Disallowing listing of user profiles for privacy.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure institutes root collection.
     * @path /institutes/{instituteId}
     * @allow (get) Any user can read an institute's data.
     * @deny (create) Only the institute owner can create.
     * @allow (update) Only the institute owner can update.
     * @deny (delete) Only the institute owner can delete.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{instituteId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isInstituteOwner(instituteId);
      allow delete: if isSignedIn() && isInstituteOwner(instituteId);
    }

    /**
     * @description Secure institute members subcollection.
     * @path /institutes/{instituteId}/members/{userId}
     * @allow (get) Any institute member can get member's profile.
     * @deny (list) No one can list institute members.
     * @allow (create) Only the institute owner can create a member.
     * @allow (update) Only the institute owner can update a member's profile.
     * @deny (delete) Only the institute owner can delete a member.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{instituteId}/members/{userId} {
      allow get: if isSignedIn() && isInstituteMember(instituteId, userId);
      allow list: if false;
      allow create: if isSignedIn() && isInstituteOwner(instituteId);
      allow update: if isSignedIn() && isInstituteOwner(instituteId);
      allow delete: if isSignedIn() && isInstituteOwner(instituteId);
    }

    /**
     * @description Secure user notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (get) Authenticated user can read their own notes.
     * @deny (get) Authenticated user cannot read another user's notes.
     * @allow (create) Authenticated user can create their own notes if the userId matches their auth UID.
     * @deny (create) Unauthenticated user cannot create notes.
     * @allow (update) Authenticated user can update their own notes.
     * @deny (update) Authenticated user cannot update another user's notes.
     * @allow (delete) Authenticated user can delete their own notes.
     * @deny (delete) Authenticated user cannot delete another user's notes.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure courses.
     * @path /courses/{courseId}
     * @allow (get) Any user can read course data.
     * @deny (create) Only the institute that owns the course can create.
     * @allow (update) Only the institute that owns the course can update.
     * @deny (delete) Only the institute that owns the course can delete.
     * @principle Enforces document ownership for writes.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.instituteId != null && isInstituteOwner(request.resource.data.instituteId);
      allow update: if isSignedIn() && isCourseOwner(courseId);
      allow delete: if isSignedIn() && isCourseOwner(courseId);
    }

     /**
      * @description Secure course enrollments subcollection.
      * @path /courses/{courseId}/enrollments/{enrollmentId}
      * @allow (get) Any enrolled student can get their enrollment details.
      * @deny (list) Only enrolled students can list enrollments for a course.
      * @allow (create) Any student can enroll in a course.
      * @deny (update) No one can update an enrollment once created.
      * @deny (delete) Only the institute owner can remove an enrollment.
      * @principle Enforces document ownership for writes.
      */
    match /courses/{courseId}/enrollments/{enrollmentId} {
      allow get: if isSignedIn() && isEnrolled(courseId, request.auth.uid);
      allow list: if isSignedIn() && isEnrolled(courseId, request.auth.uid);
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if isSignedIn() && isCourseOwner(courseId);
    }

    /**
     * @description Secure system-wide announcements.
     * @path /announcements/{announcementId}
     * @allow (get) Any user can read announcements.
     * @allow (create) Only admins can create announcements.
     * @allow (update) Only admins can update announcements.
     * @allow (delete) Only admins can delete announcements.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secure chat messages.
     * @path /userProfiles/{userId}/chatSessions/{chatSessionId}/messages/{messageId}
     * @allow (get) Authenticated user can read their own messages in a chat session.
     * @allow (list) Authenticated user can list their own messages in a chat session.
     * @deny (create) Only users participating in the chat session can create messages.
     * @allow (update) No one can update messages.
     * @deny (delete) No one can delete messages.
     * @principle Enforces document ownership for reads and restricted access for writes.
     */
    match /userProfiles/{userId}/chatSessions/{chatSessionId}/messages/{messageId} {
        allow get: if isSignedIn() && isChatParticipant(userId, chatSessionId);
        allow list: if isSignedIn() && isChatParticipant(userId, chatSessionId);
        allow create: if isSignedIn() && isChatParticipant(userId, chatSessionId);
        allow update: if false;
        allow delete: if false;
    }
  }

  // Helper functions

  // Checks if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Checks if the user is the owner of the document based on the userId in the path.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Checks if the user is the owner of the document and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource.data.userId == userId;
  }

  // Checks if the user is an admin.
  function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'admin';
  }

    // Checks if the user is the owner of the institute based on the instituteId in the document.
  function isInstituteOwner(instituteId) {
    return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
  }

  // Checks if the user is the owner of the document and the document exists.
  function isExistingInstituteOwner(instituteId) {
    return isSignedIn() && resource != null && resource.data.ownerId == request.auth.uid;
  }

  // Check if the user is a member of an institute.
  function isInstituteMember(instituteId, userId) {
    return exists(/databases/$(database)/documents/institutes/$(instituteId)/members/$(userId));
  }

  // Checks if the user is the owner of the course based on the instituteId in the document.
  function isCourseOwner(courseId) {
    let instituteId = get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId;
    return isInstituteOwner(instituteId);
  }

  // Checks if the user is the owner of the document and the document exists.
  function isExistingCourseOwner(courseId) {
    return isSignedIn() && resource != null && get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId == request.auth.uid;
  }

  // Checks if the user is enrolled in the course.
  function isEnrolled(courseId, userId) {
    return exists(/databases/$(database)/documents/courses/$(courseId)/enrollments/$(userId));
  }

  // Checks if the user is a participant of the chat session
    function isChatParticipant(userId, chatSessionId) {
      return userId == request.auth.uid;
    }
}