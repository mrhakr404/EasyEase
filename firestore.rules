/**
 * @fileoverview Firestore Security Rules for EnrollEase Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and role-based access control for administrative functions. It prioritizes
 * security by default, requiring explicit rules for all data access patterns.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles, accessible only by the user themselves.
 * - /institutes/{instituteId}: Stores institute profiles.
 * - /institutes/{instituteId}/members/{userId}: Stores members of an institute.
 * - /users/{userId}/notes/{noteId}: Stores user-specific notes, accessible only by the user.
 * - /courses/{courseId}: Stores course information, owned by an institute.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Stores student enrollments for courses.
 * - /announcements/{announcementId}: Stores global announcements, managed by admins.
 * - /userProfiles/{userId}/dailyQuizAttempts/{attemptId}: Stores user's quiz attempts, accessible only by the user.
 *
 * Key Security Decisions:
 * - User profiles are only readable and writable by the authenticated user.
 * - Notes are only readable and writable by the authenticated user.
 * - Public listing of user profiles and notes is disallowed.
 * - Announcements are publicly readable but only writable by admins (currently not implemented).
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 *  - Courses MUST denormalize the instituteId, so that Rules can easily enforce that only the owning institute can modify the Course.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects all documents in the database from unauthorized access.
     * @path /databases/{database}/documents
     * @allow (get) - Anyone can attempt to read any document (will return null if doesn't exist).
     * @deny (create, update, delete) - No one can create, update, or delete documents at the root level.
     * @principle Prevents accidental or malicious modification of root-level data.
     */
    match /{document=**} {
      allow get: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user profiles, ensuring only the authenticated user can access their own profile.
     * @path /userProfiles/{userId}
     * @allow (get) User with matching ID can read their own profile.
     * @allow (create) User with matching ID can create their own profile.
     * @allow (update) User with matching ID can update their own profile.
     * @allow (delete) User with matching ID can delete their own profile.
     * @deny (get) User with a different ID cannot read this profile.
     * @deny (create) User with a different ID cannot create this profile.
     * @deny (update) User with a different ID cannot update this profile.
     * @deny (delete) User with a different ID cannot delete this profile.
     * @principle Enforces document ownership; users can only manage their own profiles.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

        /**
     * @description Manages institutes. Institutes can be created by anyone but managed only by their owner.
     * @path /institutes/{instituteId}
     */
    match /institutes/{instituteId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if resource.data.ownerId == request.auth.uid && resource != null;
        allow delete: if resource.data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description Manages members of an institute.
     * @path /institutes/{instituteId}/members/{userId}
     */
    match /institutes/{instituteId}/members/{userId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages notes for each user, ensuring only the owner can access them.
     * @path /users/{userId}/notes/{noteId}
     * @allow (get) User with matching ID can read their own note.
     * @allow (create) User with matching ID can create their own note.
     * @allow (update) User with matching ID can update their own note.
     * @allow (delete) User with matching ID can delete their own note.
     * @deny (get) User with a different ID cannot read this note.
     * @deny (create) User with a different ID cannot create this note.
     * @deny (update) User with a different ID cannot update this note.
     * @deny (delete) User with a different ID cannot delete this note.
     * @principle Enforces document ownership; users can only manage their own notes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages courses, restricting creation to authenticated users and updates/deletes to the owning institute.
     * @path /courses/{courseId}
     * @allow (get) Anyone can read course information.
     * @allow (create) Any authenticated user can create a course.
     * @allow (update) Only the institute that owns the course can update it.
     * @allow (delete) Only the institute that owns the course can delete it.
     * @deny (create) If the course data doesn't contain the instituteId.
     * @principle Enforces ownership for modifications, allows public read access.
     */
    match /courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if resource.data.instituteId == request.auth.uid && resource != null;
      allow delete: if resource.data.instituteId == request.auth.uid && resource != null;
    }

        /**
     * @description Manages enrollments for a course.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages system-wide announcements.
     * @path /announcements/{announcementId}
     * @allow (get) Anyone can read announcements.
     * @deny (create, update, delete) Only admins can create, update, or delete announcements.
     * @principle Allows public read access, restricts write access to admins (not yet implemented).
     */
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Manages daily quiz attempts for each user, ensuring only the owner can access them.
     * @path /userProfiles/{userId}/dailyQuizAttempts/{attemptId}
     * @allow (get) User with matching ID can read their own quiz attempt.
     * @allow (create) User with matching ID can create their own quiz attempt.
     * @allow (update) User with matching ID can update their own quiz attempt.
     * @allow (delete) User with matching ID can delete their own quiz attempt.
     * @deny (get) User with a different ID cannot read this quiz attempt.
     * @deny (create) User with a different ID cannot create this quiz attempt.
     * @deny (update) User with a different ID cannot update this quiz attempt.
     * @deny (delete) User with a different ID cannot delete this quiz attempt.
     * @principle Enforces document ownership; users can only manage their own quiz attempts.
     */
    match /userProfiles/{userId}/dailyQuizAttempts/{attemptId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the document and the document exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}