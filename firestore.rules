/**
 * @file Firebase Security Rules for EnrollEase Platform
 *
 * @core_philosophy This ruleset employs a hybrid security model:
 *   - User-owned data: Strict ownership enforced via path-based rules (e.g., /users/{userId}/...).
 *   - Institute-owned data: Institutes control their own data (e.g., courses, members).
 *   - Public data: System-wide announcements are publicly readable but admin-writeable.
 *
 * @data_structure
 *   - /userProfiles/{userId}: Stores user profile information.
 *   - /institutes/{instituteId}: Stores institute information.
 *   - /institutes/{instituteId}/members/{userId}: Stores institute member profiles (mirrors /userProfiles/{userId}).
 *   - /users/{userId}/notes/{noteId}: Stores user-specific notes.
 *   - /courses/{courseId}: Stores course information, owned by an institute.
 *   - /courses/{courseId}/enrollments/{enrollmentId}: Stores course enrollment data.
 *   - /announcements/{announcementId}: Stores global announcements.
 *
 * @key_security_decisions
 *   - User profiles are private and only accessible by the user themselves.
 *   - Institutes manage their own courses and member lists.
 *   - Announcements are publicly readable but only writable by admins (defined by adminId).
 *   - Listing of all users is disallowed to prevent enumeration attacks.
 *   - Data validation is minimal in this prototyping phase, focusing on authorization-critical fields.
 *
 * @denormalization_for_authorization
 *   - Course documents store the instituteId to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /userProfiles/{userId}
     * @allow (get, update, delete) if the user is the owner (userId matches auth.uid).
     * @allow (create) if the user ID in the request data matches auth.uid (self-creation).
     * @deny (get, update, delete) if the user is not the owner.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /userProfiles/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Controls access to institutes.
      * @path /institutes/{instituteId}
      */
    match /institutes/{instituteId} {
        allow get: if true;
        allow list: if true;
        allow create: if request.auth.uid != null;
        allow update: if request.auth.uid == resource.data.ownerId;
        allow delete: if request.auth.uid == resource.data.ownerId;
    }

    /**
     * @description Controls access to institute members.
     * @path /institutes/{instituteId}/members/{userId}
     */
    match /institutes/{instituteId}/members/{userId} {
        function isInstituteOwner(instituteId) {
            return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
        }
        allow get: if isInstituteOwner(instituteId);
        allow list: if false;
        allow create: if isInstituteOwner(instituteId);
        allow update: if isInstituteOwner(instituteId);
        allow delete: if isInstituteOwner(instituteId);
    }

    /**
     * @description Controls access to user notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (get, list, create, update, delete) if the user is the owner (userId matches auth.uid).
     * @deny (get, list, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for notes, restricting access to the owner.
     */
    match /users/{userId}/notes/{noteId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to courses.
     * @path /courses/{courseId}
     * @allow (get, list) anyone can read course information.
     * @allow (create, update, delete) only the institute that owns the course can modify it.
     * @principle Public read access with owner-only writes for courses.
     */
    match /courses/{courseId} {
        function isInstituteOwner(instituteId) {
          return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
        }
      function getInstituteId() {
          return resource.data.instituteId;
        }
        allow get: if true;
        allow list: if true;
        allow create: if request.auth.uid != null;
        allow update: if isInstituteOwner(getInstituteId());
        allow delete: if isInstituteOwner(getInstituteId());
    }

    /**
     * @description Controls access to course enrollments.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
        function isInstituteOwner(instituteId) {
            return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
        }
        function getCourseId() {
          return request.path[6];
        }
        allow get: if isInstituteOwner(getCourseId());
        allow list: if false;
        allow create: if isInstituteOwner(getCourseId());
        allow update: if isInstituteOwner(getCourseId());
        allow delete: if isInstituteOwner(getCourseId());
    }

    /**
     * @description Controls access to system-wide announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) anyone can read announcements.
     * @allow (create, update, delete) only admins can modify announcements (adminId matches auth.uid).
     * @principle Public read access with admin-only writes for announcements.
     */
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid == resource.data.adminId;
      allow delete: if request.auth.uid == resource.data.adminId && resource != null;
    }
  }
}