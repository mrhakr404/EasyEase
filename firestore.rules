/**
 * @file EnrollEase Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for personal data, institute-based ownership for course and member data,
 *              and administrative control over announcements. It prioritizes data isolation and secure access patterns.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles, accessible only by the user themselves.
 * - /institutes/{instituteId}: Stores institute profiles, with ownership managed by the institute's owner.
 * - /institutes/{instituteId}/members/{userId}: Stores members of an institute.
 * - /users/{userId}/notes/{noteId}: Stores personal notes for each user, accessible only by the user.
 * - /courses/{courseId}: Stores course information, owned by an institute.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Stores enrollment records for courses.
 * - /announcements/{announcementId}: Stores global announcements, managed by admins.
 *
 * Key Security Decisions:
 * - User profiles and notes are strictly user-owned and private.
 * - Institutes manage their own member lists.
 * - Course ownership is determined by the 'instituteId' field.
 * - Announcements are globally readable but admin-managed.
 *
 * Denormalization for Authorization:
 * - Course documents have an `instituteId` field, which is used to determine which institute owns the course. This avoids needing to query a separate collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (read, write) if the user is signed in and their UID matches the userId in the path.
     * @deny (read, write) if the user is not signed in or their UID does not match the userId in the path.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /userProfiles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to institute documents.
     * @path /institutes/{instituteId}
     * @allow (read) to everyone.
     * @allow (create, update, delete) only to the institute owner.
     * @deny (create, update, delete) if the user is not the institute owner.
     * @principle Enforces institute-ownership for institute data.
     */
    match /institutes/{instituteId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description Controls access to institute members.
     * @path /institutes/{instituteId}/members/{userId}
     * @allow (read, write) if the user is signed in and is a member of the institute.
     * @deny (read, write) if the user is not signed in or not a member of the institute.
     * @principle Enforces institute-managed membership for data access.
     */
    match /institutes/{instituteId}/members/{userId} {
      allow get: if isSignedIn() && isInstituteMember(instituteId, userId);
      allow list: if false; // Listing members directly should not be allowed; only access through institute
      allow create: if isSignedIn() && isInstituteOwner(instituteId);
      allow update: if isSignedIn() && isInstituteOwner(instituteId) && resource != null;
      allow delete: if isSignedIn() && isInstituteOwner(instituteId) && resource != null;
    }

    /**
     * @description Controls access to user notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (read, write) if the user is signed in and owns the note.
     * @deny (read, write) if the user is not signed in or does not own the note.
     * @principle Enforces strict user-ownership for personal notes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to courses.
     * @path /courses/{courseId}
     * @allow (read) to everyone.
     * @allow (create, update, delete) only to the institute that owns the course.
     * @deny (create, update, delete) if the user is not the institute owner.
     * @principle Enforces institute-ownership for course data.
     */
    match /courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isInstituteOwner(request.resource.data.instituteId);
      allow update: if isSignedIn() && isInstituteOwner(resource.data.instituteId) && resource != null;
      allow delete: if isSignedIn() && isInstituteOwner(resource.data.instituteId) && resource != null;
    }

    /**
     * @description Controls access to course enrollments.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     * @allow (read, write) if the user is signed in and is a student enrolled in the course, or the institute owner.
     * @deny (read, write) if the user is not signed in or not enrolled in the course.
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
      allow get: if isSignedIn() && (isEnrolled(courseId, request.auth.uid) || isInstituteOwner(getInstituteIdFromCourse(courseId)));
      allow list: if isSignedIn() && (isEnrolled(courseId, request.auth.uid) || isInstituteOwner(getInstituteIdFromCourse(courseId)));
      allow create: if isSignedIn() && isInstituteOwner(getInstituteIdFromCourse(courseId));
      allow update: if isSignedIn() && isInstituteOwner(getInstituteIdFromCourse(courseId)) && resource != null;
      allow delete: if isSignedIn() && isInstituteOwner(getInstituteIdFromCourse(courseId)) && resource != null;
    }

    /**
     * @description Controls access to announcements.
     * @path /announcements/{announcementId}
     * @allow (read) to everyone.
     * @allow (create, update, delete) only to admins.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only management for announcements.
     */
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    //================== Helper Functions ==================//

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the userId in the path.
     * @param {string} userId The user ID from the path.
     * @return True if the user is signed in and their UID matches the userId, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is the owner of the existing resource based on the userId in the path.
      *              It also verifies that the resource exists to prevent accidental operations on non-existent documents.
      * @param {string} userId The user ID from the path.
      * @return True if the user is signed in, their UID matches the userId, and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.  This is a placeholder; implement real role-based logic.
     * @return Always false for now.  Replace with a check against a roles collection or custom claims.
     */
    function isAdmin() {
      return false; // TODO: Implement real admin role check.
    }

    /**
     * @description Checks if the user is a member of the institute. This is a placeholder; implement real membership logic.
     * @param {string} instituteId The ID of the institute.
     * @param {string} userId The ID of the user.
     * @return Always false for now.  Replace with a check against the institute's members subcollection.
     */
    function isInstituteMember(instituteId, userId) {
       return get(/databases/$(database)/documents/institutes/$(instituteId)/members/$(userId)).data != null;
    }

    /**
     * @description Checks if the user is the owner of the institute. This is a placeholder; implement real ownership logic.
     * @param {string} instituteId The ID of the institute.
     * @return True if the user is the owner, false otherwise.
     */
    function isInstituteOwner(instituteId) {
      return isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
    }

   /**
    * @description Placeholder function to check if a student is enrolled in a course.
    * @param {string} courseId - The ID of the course.
    * @param {string} userId - The ID of the user (student).
    * @return {bool} - Returns true if the student is enrolled, false otherwise.  Currently always returns false.
    */
    function isEnrolled(courseId, userId) {
      return get(/databases/$(database)/documents/courses/$(courseId)/enrollments/$(userId)).data != null;
    }
     /**
      * @description Helper function to get the institute ID from a course document.
      * @param {string} courseId - The ID of the course.
      * @return {string} - The institute ID, or an empty string if not found.
      */
    function getInstituteIdFromCourse(courseId) {
        return get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId;
    }

  }
}