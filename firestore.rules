/**
 * @fileoverview Firestore Security Rules for EnrollEase Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and notes,
 * institute-ownership for institutes and courses, and admin-only access for announcements.
 * Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles.
 * - /institutes/{instituteId}: Stores institute profiles.
 * - /institutes/{instituteId}/members/{userId}: Mirrors UserProfile data for institute members.
 * - /users/{userId}/notes/{noteId}: Stores notes specific to a user.
 * - /courses/{courseId}: Stores course information.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Stores course enrollment information.
 * - /announcements/{announcementId}: Stores global announcements.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profiles and notes.
 * - Institutes can only manage their own courses and members.
 * - Announcements can only be created/managed by admins.
 * - Data validation is minimized to focus on authorization.
 *
 * Denormalization for Authorization:
 * - The `Course` entity contains an `instituteId` field, allowing course access to be controlled by institute ownership.
 * - The `Note` entity contains a `userId` field, enforcing user-ownership for notes.
 * - The `Institute` entity contains an `ownerId` field, enforcing user-ownership for institutes.
 *
 * Structural Segregation:
 * - User-specific data (notes) are stored in a dedicated subcollection under the user's document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profile information.
     * @path /userProfiles/{userId}
     * @allow (create) User with matching {userId} can create their own profile.
     * @allow (get, update, delete) User with matching {userId} can read, update, and delete their own profile.
     * @deny (create, get, update, delete) Any other user cannot create, read, update, or delete this profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /userProfiles/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to institutes.
     * @path /institutes/{instituteId}
     * @allow (create) User with matching {instituteId} can create their own institute.
     * @allow (get, update, delete) User with matching {instituteId} can read, update, and delete their own institute.
     * @deny (create, get, update, delete) Any other user cannot create, read, update, or delete this institute.
     * @principle Enforces document ownership for all operations on institutes.
     */
    match /institutes/{instituteId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn(); // An institute creator can create an institute
        allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid; // Only the owner can update the institute
        allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid; // Only the owner can delete the institute
    }

     /**
      * @description Controls access to institute members.
      * @path /institutes/{instituteId}/members/{userId}
      * @allow (create) Institute owner can create members.
      * @allow (get, update, delete) Institute owner and the user themselves can read, update, and delete.
      * @deny (create, get, update, delete) Any other user cannot create, read, update, or delete this member.
      * @principle Enforces institute ownership for managing members.
      */
    match /institutes/{instituteId}/members/{userId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid; // Only the owner can create members
        allow update: if isSignedIn() && (get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid || isOwner(userId)); // The owner and the member themselves can update
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid; // Only the owner can delete the member
    }

    /**
     * @description Controls access to notes for each user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with matching {userId} can create notes.
     * @allow (get, update, delete) User with matching {userId} can read, update, and delete their own notes.
     * @deny (create, get, update, delete) Any other user cannot create, read, update, or delete these notes.
     * @principle Enforces document ownership for all operations on user notes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && request.resource.data.userId == userId;
    }

    /**
     * @description Controls access to courses.
     * @path /courses/{courseId}
     * @allow (create) Institute can create courses.
     * @allow (get, update, delete) Institute can read, update, and delete their courses.
     * @deny (create, get, update, delete) Any other user cannot create, read, update, or delete these courses.
     * @principle Enforces institute ownership for all operations on courses.
     */
    match /courses/{courseId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId == request.auth.uid; // Only the institute owner can create courses
        allow update: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(resource.data.instituteId)).data.ownerId == request.auth.uid; // Only the institute owner can update courses
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(resource.data.instituteId)).data.ownerId == request.auth.uid; // Only the institute owner can delete courses
    }

    /**
     * @description Controls access to course enrollments.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Implement enrollment logic
        allow update: if false; // TODO: Implement enrollment logic
        allow delete: if false; // TODO: Implement enrollment logic
    }

    /**
     * @description Controls access to system-wide announcements.
     * @path /announcements/{announcementId}
     * @allow (create) Only admins can create announcements.
     * @allow (get, update, delete) Only admins can read, update, and delete announcements.
     * @deny (create, get, update, delete) Any other user cannot create, read, update, or delete announcements.
     * @principle Restricts access to announcements to administrators only.
     */
    match /announcements/{announcementId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Implement admin role check
        allow update: if false; // TODO: Implement admin role check
        allow delete: if false; // TODO: Implement admin role check
    }
  }
}