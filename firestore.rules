/**
 * @fileoverview Firestore Security Rules for EnrollEase Platform
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for personal data and a role-based model for shared resources,
 * with an emphasis on preventing unauthorized access and modifications. Data validation is relaxed for rapid prototyping.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles. Only the user can read/write their own profile.
 * - /institutes/{instituteId}: Stores institute profiles. Ownership is determined by the 'ownerId' field.
 * - /institutes/{instituteId}/members/{userId}: Stores institute membership, mirroring the /userProfiles collection. Only the institute owner can manage members.
 * - /users/{userId}/notes/{noteId}: Stores notes specific to a user. Only the user can read/write their own notes.
 * - /courses/{courseId}: Stores course information. Institutes own the courses they create, linked via 'instituteId'.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Stores enrollment information for courses. Ownership managed by course.
 * - /announcements/{announcementId}: Stores global announcements, manageable only by admins (identified by 'adminId').
 *
 * Key Security Decisions:
 * - Listing of user profiles is disallowed for privacy.
 * - Public read access is granted to announcements.
 * - Data validation is minimized to authorization checks to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - Institute ownership is denormalized into the Institute documents with the `ownerId` field.
 * - Course ownership is denormalized into the Course documents with the `instituteId` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of existing data.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Rule for user profiles.
     * @path /userProfiles/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   request.auth.uid: 'user123'
     *   request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' can read their own profile.
     *   request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' can update their own profile.
     *   request.auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' can delete their own profile.
     *   request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile with ID 'user456'.
     *   request.auth.uid: 'user123'
     *   request.resource.data.id: 'user456'
     * @deny (get) User with ID 'user123' cannot read profile with ID 'user456'.
     *   request.auth.uid: 'user123'
     * @principle Enforces user-ownership: only the user can read/write their own profile.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for institutes.
     * @path /institutes/{instituteId}
     * @allow (create) User with ID 'institute123' can create an institute.
     *   request.auth.uid: 'institute123'
     *   request.resource.data.ownerId: 'institute123'
     * @allow (get) User with ID 'institute123' can read the institute.
     *   resource.data.ownerId: 'institute123'
     * @allow (update) User with ID 'institute123' can update the institute.
     *   request.auth.uid: 'institute123'
     *   resource.data.ownerId: 'institute123'
     * @allow (delete) User with ID 'institute123' can delete the institute.
     *   request.auth.uid: 'institute123'
     *   resource.data.ownerId: 'institute123'
     * @deny (create) User with ID 'user123' cannot create an institute with ownerId 'institute456'.
     *   request.auth.uid: 'user123'
     *   request.resource.data.ownerId: 'institute456'
     * @deny (get) User with ID 'user123' cannot read an institute with ownerId 'institute456'.
     *   resource.data.ownerId: 'institute456'
     * @principle Enforces ownership for institutes: only the owner can manage it.
     */
    match /institutes/{instituteId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Rule for institute members.
     * @path /institutes/{instituteId}/members/{userId}
     * @allow (create) Institute owner can add a member.
     * @allow (get) Any authenticated user can read a member.
     * @allow (update) Institute owner can update a member.
     * @allow (delete) Institute owner can delete a member.
     * @deny (create) Non-institute owner cannot add a member.
     * @deny (get) Unauthenticated user cannot read a member.
     * @principle Enforces ownership for institute members: only the institute owner can manage members.
     */
    match /institutes/{instituteId}/members/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Rule for user notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with ID 'user123' can create a note.
     *   request.auth.uid: 'user123'
     *   request.resource.data.userId: 'user123'
     * @allow (get) User with ID 'user123' can read a note.
     *   request.auth.uid: 'user123'
     *   resource.data.userId: 'user123'
     * @allow (update) User with ID 'user123' can update a note.
     *   request.auth.uid: 'user123'
     *   resource.data.userId: 'user123'
     * @allow (delete) User with ID 'user123' can delete a note.
     *   request.auth.uid: 'user123'
     *   resource.data.userId: 'user123'
     * @deny (create) User with ID 'user123' cannot create a note for user 'user456'.
     *   request.auth.uid: 'user123'
     *   request.resource.data.userId: 'user456'
     * @deny (get) User with ID 'user123' cannot read a note for user 'user456'.
     *   request.auth.uid: 'user123'
     *   resource.data.userId: 'user456'
     * @principle Enforces user-ownership: only the user can manage their own notes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rule for courses.
     * @path /courses/{courseId}
     * @allow (create) Institute with ID 'institute123' can create a course.
     *   request.auth.uid: 'institute123'
     *   request.resource.data.instituteId: 'institute123'
     * @allow (get) Anyone can read a course.
     * @allow (update) Institute with ID 'institute123' can update the course.
     *   request.auth.uid: 'institute123'
     *   resource.data.instituteId: 'institute123'
     * @allow (delete) Institute with ID 'institute123' can delete the course.
     *   request.auth.uid: 'institute123'
     *   resource.data.instituteId: 'institute123'
     * @deny (create) User with ID 'user123' cannot create a course for institute 'institute456'.
     *   request.auth.uid: 'user123'
     *   request.resource.data.instituteId: 'institute456'
     * @deny (get) User with ID 'user123' cannot read a course for institute 'institute456'.
     *   resource.data.instituteId: 'institute456'
     * @principle Enforces institute-ownership: only the institute can manage its courses.
     */
    match /courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.instituteId == get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId;
      allow update: if isSignedIn() && request.resource.data.instituteId == get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId;
      allow delete: if isSignedIn() && request.resource.data.instituteId == get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId;
    }

    /**
     * @description Rule for course enrollments.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     * @allow (create) Institute can enroll a student.
     * @allow (get) Any authenticated user can read an enrollment.
     * @allow (update) Institute can update an enrollment.
     * @allow (delete) Institute can delete an enrollment.
     * @deny (create) Non-institute cannot enroll a student.
     * @deny (get) Unauthenticated user cannot read an enrollment.
     * @principle Enforces ownership for course enrollments: only the institute can manage enrollments.
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId == get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId == get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId == get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId;
    }

    /**
     * @description Rule for announcements.
     * @path /announcements/{announcementId}
     * @allow (create) Admin can create an announcement.
     * @allow (get) Anyone can read an announcement.
     * @allow (update) Admin can update an announcement.
     * @allow (delete) Admin can delete an announcement.
     * @deny (create) Non-admin cannot create an announcement.
     * @deny (get) Unauthenticated user cannot read an announcement.
     * @principle Enforces admin-ownership: only admins can manage announcements.
     */
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
      allow update: if isSignedIn() && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }
  }
}