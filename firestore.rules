/**
 * @fileoverview Firestore Security Rules for EnrollEase.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. User profiles and notes are strictly user-owned.
 * Institutes and their members follow a role-based access control. Courses are accessible to enrolled students.
 * Announcements are public but can only be created by admins.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles, accessible only by the user.
 * - /institutes/{instituteId}: Stores institute information.
 * - /institutes/{instituteId}/members/{userId}: Stores institute members, mirroring user profile data.
 * - /users/{userId}/notes/{noteId}: Stores user-specific notes, accessible only by the user.
 * - /courses/{courseId}: Stores course information.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Tracks student enrollments for each course.
 * - /announcements/{announcementId}: Stores global announcements, writable only by admins.
 *
 * Key Security Decisions:
 * - Users can only access their own profile and notes.
 * - Institutes have their own documents, with a subcollection for member management.
 * - Courses are generally public for read, but modifications are restricted to the institute.
 * - Announcements are publicly readable but only created by admins.
 * - Data consistency is enforced by validating the 'userId' field in user-owned documents.
 * - List operations are allowed for user-owned data and public collections, but denied where data is private and should not be enumerable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete) if the user is signed in and owns the profile.
     * @deny (get, create, update, delete) if the user is not signed in or does not own the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Manages institute access.
       * @path /institutes/{instituteId}
       * @allow (get, list) Anyone can read institute data.
       * @allow (create) Only signed-in users can create an institute. The ownerId must match their uid.
       * @allow (update, delete) Only the owner of the institute can modify or delete it.
       * @principle Allows public read access but restricts write access to the owner.
       */
      match /institutes/{instituteId} {
          function isSignedIn() {
              return request.auth != null;
          }

          function isOwner(ownerId) {
              return isSignedIn() && request.auth.uid == ownerId;
          }

          function isExistingOwner(ownerId) {
              return isOwner(ownerId) && resource != null;
          }

          allow get: if true;
          allow list: if true;

          allow create: if isSignedIn();
          allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
          allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      }

      /**
       * @description Manages institute member access.
       * @path /institutes/{instituteId}/members/{userId}
       * @allow (get, list) Anyone can read institute member data.
       * @allow (create) Only an institute owner can add a member. The userId must match the document ID.
       * @allow (update, delete) Only an institute owner can modify or delete a member.
       * @principle Restricts write access to the institute owner.
       */
      match /institutes/{instituteId}/members/{userId} {
          function isSignedIn() {
              return request.auth != null;
          }

          function isInstituteOwner(instituteId) {
              return isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
          }

          function isExistingInstituteOwner(instituteId) {
              return isInstituteOwner(instituteId) && resource != null;
          }

          allow get: if true;
          allow list: if true;

          allow create: if isInstituteOwner(instituteId);
          allow update: if isInstituteOwner(instituteId);
          allow delete: if isInstituteOwner(instituteId);
      }

    /**
     * @description Manages user-specific note access.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create, get, update, delete) if the user is signed in and owns the note.
     * @deny (create, get, update, delete) if the user is not signed in or does not own the note.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notes/{noteId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages course access.
     * @path /courses/{courseId}
     * @allow (get, list) Anyone can read course data.
     * @allow (create) Only institutes can create courses. The instituteId must match the user's institute ID.
     * @allow (update, delete) Only the institute that created the course can modify or delete it.
     * @principle Allows public read access but restricts write access to the owning institute.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isInstitute(instituteId) {
        return isSignedIn() && get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
      }

        function isExistingInstitute(instituteId) {
            return isInstitute(instituteId) && resource != null;
        }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.instituteId != null;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId == request.auth.uid;
    }

      /**
       * @description Manages course enrollments.
       * @path /courses/{courseId}/enrollments/{enrollmentId}
       * @allow (get, list) Anyone can read enrollment data.
       * @allow (create) Only a user can create an enrollment for themselves.
       * @allow (update, delete) Only the user who created the enrollment can modify or delete it.
       * @principle Restricts enrollment creation and modification to the user.
       */
      match /courses/{courseId}/enrollments/{enrollmentId} {
          function isSignedIn() {
              return request.auth != null;
          }

          function isEnrolled(courseId, userId) {
              return isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.studentIds.hasAny([userId]);
          }

          function isExistingEnrolled(courseId, userId) {
              return isEnrolled(courseId, userId) && resource != null;
          }

          allow get: if true;
          allow list: if true;

          allow create: if isSignedIn(); // TODO: Add enrollment validation once the schema is updated with an ownership field.
          allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
          allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      }

    /**
     * @description Manages system-wide announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) Anyone can read announcements.
     * @allow (create) Only admins can create announcements.
     * @deny (update, delete) No one can update or delete announcements.
     * @principle Allows public read access but restricts creation to admins.
     */
    match /announcements/{announcementId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
      }

      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }
  }
}