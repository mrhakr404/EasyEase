/**
 * @fileoverview Firestore Security Rules for EnrollEase.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for personal data and a role-based model for organizational data.
 * Users can only access their own profiles and notes. Institutes control their own courses and member lists. Announcements are admin-managed.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles, accessible only by the user themselves.
 * - /institutes/{instituteId}: Stores institute profiles, accessible to institute owners.
 * - /institutes/{instituteId}/members/{userId}: Stores member profiles for an institute.
 * - /users/{userId}/notes/{noteId}: Stores user-specific notes, accessible only by the user.
 * - /courses/{courseId}: Stores course information, accessible by the institute that owns the course.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Tracks student enrollments, managed by the institute.
 * - /announcements/{announcementId}: Stores global announcements, accessible to all but manageable only by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - The default security posture is strict: if a relationship is ambiguous, access is denied.
 *
 * Denormalization for Authorization:
 * - Institutes have an `ownerId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to user profiles based on ownership.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner of the profile.
     * @deny (get, create, update, delete, list) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to institutes collection based on institute ownership.
     * @path /institutes/{instituteId}
     * @allow (get, create, update, delete, list) if the user is the owner of the institute.
     * @deny (get, create, update, delete, list) if the user is not the owner of the institute.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{instituteId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Grants access to institute members based on institute ownership.
     * @path /institutes/{instituteId}/members/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner of the institute.
     * @deny (get, create, update, delete, list) if the user is not the owner of the institute.
     * @principle Enforces document ownership for all operations.
     */
    match /institutes/{instituteId}/members/{userId} {
      allow get: if get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
      allow list: if get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
      allow create: if get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
      allow delete: if get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Grants access to user's notes based on ownership.
     * @path /users/{userId}/notes/{noteId}
     * @allow (get, create, update, delete, list) if the user is the owner of the note.
     * @deny (get, create, update, delete, list) if the user is not the owner of the note.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to courses collection based on institute ownership.
     * @path /courses/{courseId}
     * @allow (get, create, update, delete, list) if the user is the owner of the institute that owns the course.
     * @deny (get, create, update, delete, list) if the user is not the owner of the institute that owns the course.
     * @principle Enforces document ownership for all operations.
     */
    match /courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(request.resource.data.instituteId)).data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(resource.data.instituteId)).data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/institutes/$(resource.data.instituteId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Grants access to course enrollments based on institute ownership.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     * @allow (get, create, update, delete, list) if the user is the owner of the institute that owns the course.
     * @deny (get, create, update, delete, list) if the user is not the owner of the institute that owns the course.
     * @principle Enforces document ownership for all operations.
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
      allow get: if get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId == request.auth.uid;
      allow list: if get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId == request.auth.uid;
      allow create: if get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId == request.auth.uid;
      allow delete: if get(/databases/$(database)/documents/courses/$(courseId)).data.instituteId == request.auth.uid;
    }

    /**
     * @description Grants public read access to announcements and restricts write access to admins.
     * @path /announcements/{announcementId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) only to admins.
     * @principle Provides global access to announcements while restricting write operations to authorized personnel.
     */
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }
  }
}