/**
 * @fileoverview Firestore Security Rules for EnrollEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data, combined with public read access for certain collections where content ownership is verifiable.
 *
 * Data Structure:
 * - User profiles are stored under /userProfiles/{userId} and are only accessible to the owning user.
 * - Institutes are stored under /institutes/{instituteId}.
 * - Institute members are stored under /institutes/{instituteId}/members/{userId}.
 * - User-specific notes are stored under /users/{userId}/notes/{noteId} and are only accessible to the owning user.
 * - Courses are stored under /courses/{courseId} and include instituteId to denote ownership.
 * - Course enrollments are stored under /courses/{courseId}/enrollments/{enrollmentId}.
 * - System-wide announcements are stored under /announcements/{announcementId} and are publicly readable, but create/update/delete actions are restricted.
 * - Chat messages are stored under /userProfiles/{userId}/chatSessions/{sessionId}/messages/{messageId}.
 *
 * Key Security Decisions:
 * - User listing is disabled for userProfiles.
 * - Public read access is granted for announcements.
 * - Strict ownership is enforced for user profiles, notes, and chat messages.
 * - Immutable ownership: Once a document is created with an owner, the owner cannot be changed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read and write their own profile.
     * @path /userProfiles/{userId}
     * @allow (create, update, get, delete) - User with ID 'user123' can create/update/get/delete their own profile at /userProfiles/user123.
     * @deny (create, update, get, delete) - User with ID 'user456' cannot access /userProfiles/user123.
     * @principle Enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Root collection for all institutes.
     * @path /institutes/{instituteId}
     * @allow (create) - Authenticated user can create a new institute.  No specific data validation implemented during prototyping.
     * @allow (get, list) - Any user can retrieve institute details and list all institutes.
     * @allow (update, delete) - No user can update or delete an institute during prototyping.
     * @deny (update, delete) - No user can update or delete institute data.
     * @principle: Public read, restricted write.
     */
    match /institutes/{instituteId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Subcollection storing members of an institute, mirroring the UserProfile.
     * @path /institutes/{instituteId}/members/{userId}
     * @allow (get) - Any user can read the profile of a member within an institute.
     * @allow (list) - Any user can list members of an institute.
     * @allow (create) - Any authenticated user can be added as a member in an institute during prototyping.
     * @allow (update, delete) - During prototyping, no user can update or delete member profiles.
     * @deny (update, delete) - Only institute admins will be able to update or delete in the final product.
     * @principle: Public read, restricted write.
     */
    match /institutes/{instituteId}/members/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Secure notes for each user. Only the authenticated user can read and write their own notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create, update, get, delete) - User with ID 'user123' can create/update/get/delete their own note at /users/user123/notes/note456.
     * @deny (create, update, get, delete) - User with ID 'user456' cannot access /users/user123/notes/note456.
     * @principle Enforces path-based ownership.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure courses.
     * @path /courses/{courseId}
     * @allow (create) - Only authenticated users can create a course.
     * @allow (get, list) - All users can read course details and list all courses.
     * @allow (update, delete) - No user can update or delete a course during prototyping.
     * @deny (update, delete) - No user can update or delete course data.
     * @principle Public read, restricted write.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Subcollection tracking student enrollments for a course.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     * @allow (get, list) - Any user can read enrollment details and list enrollments for a course.
     * @allow (create) - Any authenticated user can create an enrollment.
     * @allow (update, delete) - No user can update or delete an enrollment during prototyping.
     * @deny (update, delete) - No user can update or delete enrollment data.
     * @principle Public read, restricted write.
     */
    match /courses/{courseId}/enrollments/{enrollmentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Secure system-wide announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) - All users can read and list announcements.
     * @allow (create, update, delete) - No one can create, update or delete announcements during prototyping.
     * @deny (create, update, delete) - Only admins should be able to modify announcements in the final product.
     * @principle Public read, restricted write.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure chat messages for each user's chat session. Only the authenticated user can read and write their own chat messages.
     * @path /userProfiles/{userId}/chatSessions/{sessionId}/messages/{messageId}
     * @allow (create, update, get, delete) - User with ID 'user123' can create/update/get/delete their own chat message at /userProfiles/user123/chatSessions/session456/messages/message789.
     * @deny (create, update, get, delete) - User with ID 'user456' cannot access /userProfiles/user123/chatSessions/session456/messages/message789.
     * @principle Enforces path-based ownership.
     */
    match /userProfiles/{userId}/chatSessions/{sessionId}/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // ---- Helper functions ----

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}