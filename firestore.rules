/**
 * @fileoverview Firestore Security Rules for EnrollEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (profiles, notes)
 * and a role-based model for collaborative data (institutes, courses). It prioritizes
 * security and data privacy while allowing for flexible data structures.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profile data.
 * - /institutes/{instituteId}: Stores institute data, with the 'ownerId' field
 *   indicating the user who owns the institute.
 * - /institutes/{instituteId}/members/{userId}: Mirrors user profile data for
 *   institute members.
 * - /users/{userId}/notes/{noteId}: Stores user-specific notes.
 * - /courses/{courseId}: Stores course data, with the 'instituteId' field
 *   indicating the institute that owns the course. Student enrollments are managed
 *   via the 'studentIds' array.
 * - /courses/{courseId}/enrollments/{enrollmentId}: Tracks individual student enrollments in a course.
 * - /announcements/{announcementId}: Stores system-wide announcements.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles and notes.
 * - Institutes can be created, updated, and deleted only by their owners.
 * - Announcements are publicly readable but can only be created by admins.
 * - Denormalization is used to simplify rules and improve performance. For example,
 *   course documents store the 'instituteId' to allow for simple ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profiles.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile.
     * @deny (get, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows institutes to be managed by their owners.
     * @path /institutes/{instituteId}
     * @allow (get, list) to anyone.
     * @allow (create) if the user is authenticated.
     * @allow (update, delete) if the user is the owner of the institute.
     * @deny (update, delete) if the user is not the owner of the institute.
     * @principle Enforces document ownership for writes.
     */
    match /institutes/{instituteId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isOwner(resource.data.ownerId) && resource != null;
      allow delete: if isOwner(resource.data.ownerId) && resource != null;
    }

    /**
     * @description Allows members of an institute to be managed by the institute owner.
     * @path /institutes/{instituteId}/members/{userId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
     * @allow update: if get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
     * @allow delete: if get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
     * @principle Enforces ownership via the parent institute document.
     */
    match /institutes/{instituteId}/members/{userId} {
        function isInstituteOwner(instituteId) {
            return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
        }
        allow get, list: if true;
        allow create: if isInstituteOwner(instituteId);
        allow update: if isInstituteOwner(instituteId);
        allow delete: if isInstituteOwner(instituteId);
    }

    /**
     * @description Allows users to manage their own notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (get, list, create, update, delete) if the user is the owner of the note.
     * @deny (get, list, create, update, delete) if the user is not the owner of the note.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notes/{noteId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null && resource.data.userId == userId;
    }

    /**
     * @description Allows courses to be managed by the institute that owns them.
     * @path /courses/{courseId}
     * @allow get, list: if true;
     * @allow create: if the user is an institute owner.
     * @allow update, delete: if the user is the owner of the institute that owns the course.
     * @deny update, delete: if the user is not the owner of the institute that owns the course.
     * @principle Enforces document ownership for writes.
     */
    match /courses/{courseId} {
      function isInstituteOwner(instituteId) {
        return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isInstituteOwner(request.resource.data.instituteId);
      allow update: if isSignedIn() && resource != null && isInstituteOwner(resource.data.instituteId);
      allow delete: if isSignedIn() && resource != null && isInstituteOwner(resource.data.instituteId);
    }

    /**
     * @description Allows enrollments to be managed by the institute that owns the course.
     * @path /courses/{courseId}/enrollments/{enrollmentId}
     *  @allow get: if true;
     *  @allow list: if true;
     * @allow create: if the user is the owner of the institute that owns the course.
     * @allow update: if the user is the owner of the institute that owns the course.
     * @allow delete: if the user is the owner of the institute that owns the course.
     * @principle Enforces document ownership for writes.
     */
      match /courses/{courseId}/enrollments/{enrollmentId} {
        function isInstituteOwner(instituteId) {
          return get(/databases/$(database)/documents/institutes/$(instituteId)).data.ownerId == request.auth.uid;
        }
        allow get, list: if true;
        allow create: if isSignedIn() && isInstituteOwner(request.resource.data.instituteId);
        allow update: if isSignedIn() && resource != null && isInstituteOwner(resource.data.instituteId);
        allow delete: if isSignedIn() && resource != null && isInstituteOwner(resource.data.instituteId);
      }

    /**
     * @description Allows system-wide announcements to be managed by admins.
     * @path /announcements/{announcementId}
     * @allow get, list: if true;
     * @allow create: if the user is an admin.
     * @allow update: if the user is an admin.
     * @allow delete: if the user is an admin.
     * @principle Enforces admin-only access for writes.
     */
    match /announcements/{announcementId} {
      function isAdmin() {
        return false; // TODO: Implement admin role check
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}