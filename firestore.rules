/**
 * @fileoverview Firestore Security Rules for ImageVerse application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and images.
 * Each user can only access their own profile data and the images they have uploaded.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/images/{imageId}: Stores image metadata for a user's uploaded images.
 *
 * Key Security Decisions:
 * - Users can only create their own user document.
 * - Listing all users is disallowed.
 * - All images are stored under the user's collection ensuring the same security requirements.
 *
 * Denormalization for Authorization:
 *  - Image documents include the `userId` to simplify ownership checks.
 *  - User documents use the `id` field, matching the Firebase Auth UID, for consistent ownership validation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @deny (create) Authenticated user cannot create a profile with a different user ID.
     * @allow (get) Authenticated user can read their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @allow (update) Authenticated user can update their own profile.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to image metadata documents within a user's collection.
     * @path /users/{userId}/images/{imageId}
     * @allow (create) Authenticated user can create an image metadata document under their own user ID.
     * @deny (create) Authenticated user cannot create an image metadata document under another user's ID.
     * @allow (get) Authenticated user can read image metadata documents under their own user ID.
     * @deny (get) Authenticated user cannot read image metadata documents under another user's ID.
     * @allow (update) Authenticated user can update image metadata documents under their own user ID.
     * @deny (update) Authenticated user cannot update image metadata documents under another user's ID.
     * @allow (delete) Authenticated user can delete image metadata documents under their own user ID.
     * @deny (delete) Authenticated user cannot delete image metadata documents under another user's ID.
     * @principle Enforces document ownership for images stored under a user's profile.
     */
    match /users/{userId}/images/{imageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}